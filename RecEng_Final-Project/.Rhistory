rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.1, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 00.1, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 000.1, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.2, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.2, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.1, conf = 0.2, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.2, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.3, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.4, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.5, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.01, conf = 0.6, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 5))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 000.1, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
rulesDF$rule_support <- rulesDF$confidence/(nrow(Groceries)*0.8)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
head(rulesDF[order(rulesDF$rule_support, decreasing = T),],20)
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.1, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.06, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
rulesDF$rule_support <- rulesDF$confidence/(nrow(Groceries)*0.8)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
head(rulesDF[order(rulesDF$rule_support, decreasing = T),],20)
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.05, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
rulesDF$rule_support <- rulesDF$confidence/(nrow(Groceries)*0.8)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
head(rulesDF[order(rulesDF$rule_support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
# Top 20 according to each AR metric
liftR<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
liftR<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
lift<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
conf_rat<-head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
conf_dif<-head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
groceriesRecAr <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
lift<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
conf_rat<-head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
conf_dif<-head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
lift
conf_rat
conf_dif
print(lift)
print(lift$rules)
groceriesRecAr <- Recommender(groceriesDataset, method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
lift<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
conf_rat<-head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
conf_dif<-head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.05, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
rulesDF$rule_support <- rulesDF$confidence/(nrow(Groceries)*0.8)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
head(rulesDF[order(rulesDF$rule_support, decreasing = T),],20)
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50))
groceriesRecAr2 <- Recommender(getData(esSplitGroc,"train"), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
rulesDF$rule_support <- rulesDF$confidence/(nrow(Groceries)*0.8)
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
groceriesRecAr2 <- Recommender(groceriesDataset), method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50)
groceriesRecAr2 <- Recommender(groceriesDataset, method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50)
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
groceriesRecAr2 <- Recommender(groceriesDataset, method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
# Top 20 according to each AR metric
lift<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
conf_rat<-head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
conf_dif<-head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
print(conf_dif$rules)
print(conf_rat$rules)
knitr::opts_chunk$set(echo = TRUE)
# Load/Install packages
if(!"dplyr" %in% installed.packages()) {install.packages("dplyr")}
library(dplyr)
if(!"class" %in% installed.packages()) {install.packages("class")}
library(class)
if(!"recommenderlab" %in% installed.packages()) {install.packages("recommenderlab")}
library(recommenderlab)
if(!"shiny" %in% installed.packages()) {install.packages("shiny")}
library(shiny)
groceriesRecAr <- Recommender(groceriesDataset, method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 70))
arGroceriesModel <- getModel(groceriesRecAr)$rule_base
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
lift<-head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
conf_rat<-head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
conf_dif<-head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
print(lift$rules)
print(conf_dif$rules)
print(conf_rat$rules)
data("Groceries")
groceries_summary <- summary(Groceries)
groceries_summary
plot(groceries_summary@lengths)
itemFrequencyPlot(Groceries, topN = 20)
image(sample(Groceries, 100))
groceriesDataset <- as(Groceries, "binaryRatingMatrix")
recommenderRegistry$get_entries(dataType = "binaryRatingMatrix")
# 80-20 for train and test set
esSplitGroc <- evaluationScheme(groceriesDataset, method="split", train=0.80, given = -1)
vector_nn <- seq(100,1000,100)
models_to_evaluate <- lapply(vector_nn, function(k){
list(name = "UBCF",
param = list(nn = k))
})
names(models_to_evaluate) <- paste0("UBCF_nn", vector_nn)
resultsIBCF <- evaluate(esSplitGroc, models_to_evaluate, type = "topNList", n=c(1, 5, 10, 15, 20))
plot(resultsIBCF, annotate=c(1,2))
vector_k <- c(100,150,200,250)
models_to_evaluateJac <- lapply(vector_k, function(k){
list(name = "IBCF",
param = list(method = "Jaccard", k = k))
})
names(models_to_evaluateJac) <- paste0("IBCF_k_Jac", vector_k)
models_to_evaluateCos <- lapply(vector_k, function(k){
list(name = "IBCF",
param = list(method = "cosine", k = k))
})
names(models_to_evaluateCos) <- paste0("IBCF_k_Cos", vector_k)
models_to_evaluate <- append(models_to_evaluateJac, models_to_evaluateCos)
resultsIBCF <- evaluate(esSplitGroc, models_to_evaluate, type = "topNList", n=c(1, 5, 10, 15, 20))
plot(resultsIBCF, annotate=c(1,2))
algorithms <- list(
"random" = list(name="RANDOM", param=NULL),
"popular" = list(name="POPULAR", param=NULL),
"UBCF" = list(name="UBCF", param=list(nn=400)),
"IBCFJac" = list(name="IBCF", param=list(method = "Jaccard",
k=150)),
"AR" = list(name="AR", param = list(support = 0.001, conf = 0.01, maxlen=20))
)
resultsGroc <- evaluate(esSplitGroc, algorithms, type = "topNList", n=c(1, 5, 10, 15, 20))
plot(resultsGroc, annotate=c(1), legend = "topright")
groceriesRecAr2 <- Recommender(groceriesDataset, method = "AR", parameter = list(support = 0.001, conf = 0.001, maxlen = 50))
arGroceriesModel <- getModel(groceriesRecAr2)$rule_base
summary(arGroceriesModel)
rulesDF <- as(arGroceriesModel, "data.frame")
rulesDF$prior_conf <- rulesDF$confidence / rulesDF$lift
rulesDF$confidence_diff <- abs(rulesDF$confidence - rulesDF$prior_conf)
rulesDF$confidence_ratio <- 1- (apply(rulesDF[,c(3,7)], 1, min) / apply(rulesDF[,c(3,7)], 1, max) )
# Top 20 according to each AR metric
head(rulesDF[order(rulesDF$lift, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_ratio, decreasing = T),],20)
head(rulesDF[order(rulesDF$confidence_diff, decreasing = T),],20) # Rules with longer LHS usually have higher confidence_difference
head(rulesDF[order(rulesDF$confidence, decreasing = T),],20)
head(rulesDF[order(rulesDF$support, decreasing = T),],20)
load("bigMovieLense.RData")
str(bigMovieLense)
# On average wow many evaluations per user we have?
mean(rowCounts(bigMovieLense))
min(rowCounts(bigMovieLense))
max(rowCounts(bigMovieLense))
# Which are the evaluations from the first user?
#as(bigMovieLense[1,], "list")
# On average, how much the first user rates?
rowMeans(bigMovieLense[1,])
# Distribution of the ratings
hist(getRatings(bigMovieLense), col = "darkred")
hist(getRatings(normalize(bigMovieLense, method = "Z-score")), main="Z-score Ratings Distribution", col = "Red")
#distribution of how many movies each user has rated
hist(rowCounts(bigMovieLense), breaks = 50, main = "Histogram Rated movies by user", col = "lightBlue")
# Distribution of the average ratings per movie
hist(colMeans(bigMovieLense), main = "Histogram Average Rating per Movie", col = "lightGreen")
image(getRatingMatrix(bigMovieLense[1:50,1:100]), main="Rating Matrix Heatmap", xlab = "Movies", ylab="Users")
image(getRatingMatrix(normalize(bigMovieLense, method="Z-score")[1:50,1:100]), main=" Normalized Rating Matrix Heatmap", xlab = "Movies", ylab="Users")
views_per_movie <- colCounts(bigMovieLense)
table_view <- data.frame(movie = names(views_per_movie), views = views_per_movie)
table_view <- table_view[order(table_view$views, decreasing = T),]
avg_rating_pre_movie <- colMeans(bigMovieLense)
top_rated <- data.frame(movie = names(avg_rating_pre_movie), rating = avg_rating_pre_movie)
top_rated <- top_rated[order(top_rated$rating, decreasing = T),]
avg_movies <- merge(table_view, top_rated, by = "movie")
top_views <- avg_movies[order(avg_movies$views, decreasing = T),]
top_rated <- avg_movies[order(avg_movies$rating, decreasing =T),]
# Top viewed movies
print(as(top_views[1:10,],"matrix"))
# Top rated movies
print(as(top_rated[1:10,],"matrix"))
plot(avg_movies$rating, avg_movies$views, main = "Ratings vs Views", xlab="Movie Average Rating", ylab = "Total Views", col="lightblue")
# Get the different Algorithms that we may apply to our Recommendation Engine
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
MoviesSubset <- bigMovieLense[1:(nrow(bigMovieLense)*0.4),]
set.seed(123)
Multi_evaluate <- evaluationScheme(MoviesSubset, method = "split", train=0.8, given = 5, goodRating = 4)
algorithms <- list(
"random" = list(name="RANDOM", param=NULL),
"popular" = list(name="POPULAR", param=NULL),
"User Based CFnn50" = list(name="UBCF", param=list(nn=50)),
"User Based CFCos" = list(name="UBCF", param=list(method = "Cosine")),
"Item Based CFPea" = list(name="IBCF", param=list(method = "Pearson")),
"ALS" = list(name="ALS", param=list(k=50)),
"SVD" = list(name="SVD", param=list(k=50))
)
Multi_results <- evaluate(Multi_evaluate,
method = algorithms,
type = "topNList",
parameter = list(normalize = "Z-Score"),
n=c(1, 5, seq(10,100,10)))
plot(Multi_results, annotate=c(1,2), legend = "topleft")
ratings_results <- evaluate(Multi_evaluate, algorithms, type = "ratings")
plot(ratings_results)
algorithms2 <- list(
"random" = list(name="RANDOM", param=NULL),
"popular" = list(name="POPULAR", param=NULL),
"User Based CFnn10" = list(name="UBCF", param=list(nn=10)),
"User Based CFnn50" = list(name="UBCF", param=list(nn=50)),
"User Based CFnn100" = list(name="UBCF", param=list(nn=100)),
"User Based CFnn200" = list(name="UBCF", param=list(nn=200))
)
Multi_results <- evaluate(Multi_evaluate,
method = algorithms2,
type = "topNList",
parameter = list(normalize = "Z-Score"),
n=c(1, 5, seq(10,100,10)))
plot(Multi_results, annotate=c(1,2), legend = "topleft")
MoviesTrainDS <- bigMovieLense[1:(nrow(bigMovieLense)*0.8),]
MovieTestDS <- bigMovieLense[4833:nrow(bigMovieLense),]
#Recommender of type POPULAR
Popular_recMovies <- Recommender(MoviesTrainDS, method="POPULAR")
# Recommender UBCF
UBCF_recMovies <- Recommender(MoviesTrainDS, method = "UBCF", parameter = list(nn=10))
# Random Recommender
Random_recMovies <- Recommender(MoviesTrainDS, method = 'RANDOM')
# Hybrid Recommender
hybrid_rec <- HybridRecommender(Popular_recMovies, UBCF_recMovies, Random_recMovies ,weights = c(0.3,0.6,0.1))
# Top-10 recommendation list for the first user of the test set
hybrid_predict <- predict(hybrid_rec, newdata = MovieTestDS[1,], n=10)
as(hybrid_predict, "list")
Popular_predict <- predict(Popular_recMovies, newdata = MovieTestDS[1,], n=10)
as(Popular_predict, "list")
UBCF_predict <- predict(UBCF_recMovies, newdata = MovieTestDS[1,], n=10)
as(UBCF_predict, "list")
